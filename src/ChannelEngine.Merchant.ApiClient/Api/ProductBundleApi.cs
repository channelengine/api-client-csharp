/* 
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ChannelEngine.Merchant.ApiClient.Client;
using ChannelEngine.Merchant.ApiClient.Model;

namespace ChannelEngine.Merchant.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductBundleApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get product bundles.  You can get the full product information on bundles from the regular /products endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantProductBundleResponse</returns>
        CollectionOfMerchantProductBundleResponse ProductBundleGetByFilter (string search = null, List<string> eanList = null, List<string> merchantProductNoList = null, int? page = null);

        /// <summary>
        /// Get product bundles.  You can get the full product information on bundles from the regular /products endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantProductBundleResponse</returns>
        ApiResponse<CollectionOfMerchantProductBundleResponse> ProductBundleGetByFilterWithHttpInfo (string search = null, List<string> eanList = null, List<string> merchantProductNoList = null, int? page = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get product bundles.  You can get the full product information on bundles from the regular /products endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>Task of CollectionOfMerchantProductBundleResponse</returns>
        System.Threading.Tasks.Task<CollectionOfMerchantProductBundleResponse> ProductBundleGetByFilterAsync (string search = null, List<string> eanList = null, List<string> merchantProductNoList = null, int? page = null);

        /// <summary>
        /// Get product bundles.  You can get the full product information on bundles from the regular /products endpoint.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantProductBundleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantProductBundleResponse>> ProductBundleGetByFilterAsyncWithHttpInfo (string search = null, List<string> eanList = null, List<string> merchantProductNoList = null, int? page = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductBundleApi : IProductBundleApi
    {
        private ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductBundleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductBundleApi(String basePath)
        {
            this.Configuration = new ChannelEngine.Merchant.ApiClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductBundleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductBundleApi(ChannelEngine.Merchant.ApiClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ChannelEngine.Merchant.ApiClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ChannelEngine.Merchant.ApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ChannelEngine.Merchant.ApiClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ChannelEngine.Merchant.ApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get product bundles.  You can get the full product information on bundles from the regular /products endpoint. 
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>CollectionOfMerchantProductBundleResponse</returns>
        public CollectionOfMerchantProductBundleResponse ProductBundleGetByFilter (string search = null, List<string> eanList = null, List<string> merchantProductNoList = null, int? page = null)
        {
             ApiResponse<CollectionOfMerchantProductBundleResponse> localVarResponse = ProductBundleGetByFilterWithHttpInfo(search, eanList, merchantProductNoList, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get product bundles.  You can get the full product information on bundles from the regular /products endpoint. 
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>ApiResponse of CollectionOfMerchantProductBundleResponse</returns>
        public ApiResponse< CollectionOfMerchantProductBundleResponse > ProductBundleGetByFilterWithHttpInfo (string search = null, List<string> eanList = null, List<string> merchantProductNoList = null, int? page = null)
        {

            var localVarPath = "./v2/productbundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (eanList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eanList", eanList)); // query parameter
            if (merchantProductNoList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "merchantProductNoList", merchantProductNoList)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductBundleGetByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionOfMerchantProductBundleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CollectionOfMerchantProductBundleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionOfMerchantProductBundleResponse)));
        }

        /// <summary>
        /// Get product bundles.  You can get the full product information on bundles from the regular /products endpoint. 
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>Task of CollectionOfMerchantProductBundleResponse</returns>
        public async System.Threading.Tasks.Task<CollectionOfMerchantProductBundleResponse> ProductBundleGetByFilterAsync (string search = null, List<string> eanList = null, List<string> merchantProductNoList = null, int? page = null)
        {
             ApiResponse<CollectionOfMerchantProductBundleResponse> localVarResponse = await ProductBundleGetByFilterAsyncWithHttpInfo(search, eanList, merchantProductNoList, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get product bundles.  You can get the full product information on bundles from the regular /products endpoint. 
        /// </summary>
        /// <exception cref="ChannelEngine.Merchant.ApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">Search product(s) by Name, MerchantProductNo, Ean or Brand      This search is applied to the result after applying the other filters. (optional)</param>
        /// <param name="eanList">Search products by submitting a list of EAN&#39;s (optional)</param>
        /// <param name="merchantProductNoList">Search products by submitting a list of MerchantProductNo&#39;s (optional)</param>
        /// <param name="page">The page to filter on. Starts at 1. (optional)</param>
        /// <returns>Task of ApiResponse (CollectionOfMerchantProductBundleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionOfMerchantProductBundleResponse>> ProductBundleGetByFilterAsyncWithHttpInfo (string search = null, List<string> eanList = null, List<string> merchantProductNoList = null, int? page = null)
        {

            var localVarPath = "./v2/productbundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (eanList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "eanList", eanList)); // query parameter
            if (merchantProductNoList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "merchantProductNoList", merchantProductNoList)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductBundleGetByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionOfMerchantProductBundleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CollectionOfMerchantProductBundleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionOfMerchantProductBundleResponse)));
        }

    }
}
