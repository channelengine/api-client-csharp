/* 
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChannelEngine.Merchant.ApiClient.Client.SwaggerDateConverter;

namespace ChannelEngine.Merchant.ApiClient.Model
{
    /// <summary>
    /// MerchantOrderResponse
    /// </summary>
    [DataContract]
    public partial class MerchantOrderResponse :  IEquatable<MerchantOrderResponse>, IValidatableObject
    {
        /// <summary>
        /// The type of orders the channel support.
        /// </summary>
        /// <value>The type of orders the channel support.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelOrderSupportEnum
        {
            
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 1,
            
            /// <summary>
            /// Enum ORDERS for value: ORDERS
            /// </summary>
            [EnumMember(Value = "ORDERS")]
            ORDERS = 2,
            
            /// <summary>
            /// Enum SPLITORDERS for value: SPLIT_ORDERS
            /// </summary>
            [EnumMember(Value = "SPLIT_ORDERS")]
            SPLITORDERS = 3,
            
            /// <summary>
            /// Enum SPLITORDERLINES for value: SPLIT_ORDER_LINES
            /// </summary>
            [EnumMember(Value = "SPLIT_ORDER_LINES")]
            SPLITORDERLINES = 4
        }

        /// <summary>
        /// The type of orders the channel support.
        /// </summary>
        /// <value>The type of orders the channel support.</value>
        [DataMember(Name="ChannelOrderSupport", EmitDefaultValue=false)]
        public ChannelOrderSupportEnum? ChannelOrderSupport { get; set; }
        /// <summary>
        /// The status of the order
        /// </summary>
        /// <value>The status of the order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 1,
            
            /// <summary>
            /// Enum SHIPPED for value: SHIPPED
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED = 2,
            
            /// <summary>
            /// Enum INBACKORDER for value: IN_BACKORDER
            /// </summary>
            [EnumMember(Value = "IN_BACKORDER")]
            INBACKORDER = 3,
            
            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED = 4,
            
            /// <summary>
            /// Enum MANCO for value: MANCO
            /// </summary>
            [EnumMember(Value = "MANCO")]
            MANCO = 5,
            
            /// <summary>
            /// Enum INCOMBI for value: IN_COMBI
            /// </summary>
            [EnumMember(Value = "IN_COMBI")]
            INCOMBI = 6,
            
            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 7,
            
            /// <summary>
            /// Enum NEW for value: NEW
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW = 8,
            
            /// <summary>
            /// Enum RETURNED for value: RETURNED
            /// </summary>
            [EnumMember(Value = "RETURNED")]
            RETURNED = 9,
            
            /// <summary>
            /// Enum REQUIRESCORRECTION for value: REQUIRES_CORRECTION
            /// </summary>
            [EnumMember(Value = "REQUIRES_CORRECTION")]
            REQUIRESCORRECTION = 10
        }

        /// <summary>
        /// The status of the order
        /// </summary>
        /// <value>The status of the order</value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantOrderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantOrderResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantOrderResponse" /> class.
        /// </summary>
        /// <param name="id">The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order..</param>
        /// <param name="channelName">The name of the channel.</param>
        /// <param name="channelOrderSupport">The type of orders the channel support..</param>
        /// <param name="channelOrderNo">The unique order reference used by the channel.</param>
        /// <param name="status">The status of the order.</param>
        /// <param name="subTotalInclVat">The total value of the order lines including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering)..</param>
        /// <param name="subTotalVat">The total amount of VAT charged over the order lines  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering)..</param>
        /// <param name="shippingCostsVat">The total amount of VAT charged over the shipping fee  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering)..</param>
        /// <param name="totalInclVat">The total value of the order including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering)..</param>
        /// <param name="totalVat">The total amount of VAT charged over the total value of te order  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering)..</param>
        /// <param name="originalSubTotalInclVat">The total value of the order lines including VAT  (in the currency in which the order was paid for, see CurrencyCode)..</param>
        /// <param name="originalSubTotalVat">The total amount of VAT charged over the order lines  (in the currency in which the order was paid for, see CurrencyCode)..</param>
        /// <param name="originalShippingCostsInclVat">The shipping fee including VAT  (in the currency in which the order was paid for, see CurrencyCode)..</param>
        /// <param name="originalShippingCostsVat">The total amount of VAT charged over the shipping fee  (in the currency in which the order was paid for, see CurrencyCode)..</param>
        /// <param name="originalTotalInclVat">The total value of the order including VAT  (in the currency in which the order was paid for, see CurrencyCode)..</param>
        /// <param name="originalTotalVat">The total amount of VAT charged over the total value of te order  (in the currency in which the order was paid for, see CurrencyCode)..</param>
        /// <param name="lines">lines.</param>
        /// <param name="phone">The customer&#39;s telephone number.</param>
        /// <param name="email">The customer&#39;s email (required).</param>
        /// <param name="companyRegistrationNo">Optional. A company&#39;s chamber of commerce number.</param>
        /// <param name="vatNo">Optional. A company&#39;s VAT number.</param>
        /// <param name="paymentMethod">The payment method used on the order (required).</param>
        /// <param name="shippingCostsInclVat">The shipping fee including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering). (required).</param>
        /// <param name="currencyCode">The currency code for the amounts of the order (required).</param>
        /// <param name="orderDate">The date the order was done (required).</param>
        /// <param name="channelCustomerNo">The unique customer reference used by the channel.</param>
        /// <param name="billingAddress">The billing or invoice address (required).</param>
        /// <param name="shippingAddress">The shipping address (required).</param>
        /// <param name="extraData">Extra data on the order.</param>
        public MerchantOrderResponse(int? id = default(int?), string channelName = default(string), ChannelOrderSupportEnum? channelOrderSupport = default(ChannelOrderSupportEnum?), string channelOrderNo = default(string), StatusEnum? status = default(StatusEnum?), decimal? subTotalInclVat = default(decimal?), decimal? subTotalVat = default(decimal?), decimal? shippingCostsVat = default(decimal?), decimal? totalInclVat = default(decimal?), decimal? totalVat = default(decimal?), decimal? originalSubTotalInclVat = default(decimal?), decimal? originalSubTotalVat = default(decimal?), decimal? originalShippingCostsInclVat = default(decimal?), decimal? originalShippingCostsVat = default(decimal?), decimal? originalTotalInclVat = default(decimal?), decimal? originalTotalVat = default(decimal?), List<MerchantOrderLineResponse> lines = default(List<MerchantOrderLineResponse>), string phone = default(string), string email = default(string), string companyRegistrationNo = default(string), string vatNo = default(string), string paymentMethod = default(string), decimal? shippingCostsInclVat = default(decimal?), string currencyCode = default(string), DateTime? orderDate = default(DateTime?), string channelCustomerNo = default(string), Address billingAddress = default(Address), Address shippingAddress = default(Address), Dictionary<string, string> extraData = default(Dictionary<string, string>))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "paymentMethod" is required (not null)
            if (paymentMethod == null)
            {
                throw new InvalidDataException("paymentMethod is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.PaymentMethod = paymentMethod;
            }
            // to ensure "shippingCostsInclVat" is required (not null)
            if (shippingCostsInclVat == null)
            {
                throw new InvalidDataException("shippingCostsInclVat is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.ShippingCostsInclVat = shippingCostsInclVat;
            }
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            // to ensure "orderDate" is required (not null)
            if (orderDate == null)
            {
                throw new InvalidDataException("orderDate is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.OrderDate = orderDate;
            }
            // to ensure "billingAddress" is required (not null)
            if (billingAddress == null)
            {
                throw new InvalidDataException("billingAddress is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.BillingAddress = billingAddress;
            }
            // to ensure "shippingAddress" is required (not null)
            if (shippingAddress == null)
            {
                throw new InvalidDataException("shippingAddress is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.ShippingAddress = shippingAddress;
            }
            this.Id = id;
            this.ChannelName = channelName;
            this.ChannelOrderSupport = channelOrderSupport;
            this.ChannelOrderNo = channelOrderNo;
            this.Status = status;
            this.SubTotalInclVat = subTotalInclVat;
            this.SubTotalVat = subTotalVat;
            this.ShippingCostsVat = shippingCostsVat;
            this.TotalInclVat = totalInclVat;
            this.TotalVat = totalVat;
            this.OriginalSubTotalInclVat = originalSubTotalInclVat;
            this.OriginalSubTotalVat = originalSubTotalVat;
            this.OriginalShippingCostsInclVat = originalShippingCostsInclVat;
            this.OriginalShippingCostsVat = originalShippingCostsVat;
            this.OriginalTotalInclVat = originalTotalInclVat;
            this.OriginalTotalVat = originalTotalVat;
            this.Lines = lines;
            this.Phone = phone;
            this.CompanyRegistrationNo = companyRegistrationNo;
            this.VatNo = vatNo;
            this.ChannelCustomerNo = channelCustomerNo;
            this.ExtraData = extraData;
        }
        
        /// <summary>
        /// The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order.
        /// </summary>
        /// <value>The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order.</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the channel
        /// </summary>
        /// <value>The name of the channel</value>
        [DataMember(Name="ChannelName", EmitDefaultValue=false)]
        public string ChannelName { get; set; }


        /// <summary>
        /// The unique order reference used by the channel
        /// </summary>
        /// <value>The unique order reference used by the channel</value>
        [DataMember(Name="ChannelOrderNo", EmitDefaultValue=false)]
        public string ChannelOrderNo { get; set; }


        /// <summary>
        /// The total value of the order lines including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The total value of the order lines including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="SubTotalInclVat", EmitDefaultValue=false)]
        public decimal? SubTotalInclVat { get; set; }

        /// <summary>
        /// The total amount of VAT charged over the order lines  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The total amount of VAT charged over the order lines  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="SubTotalVat", EmitDefaultValue=false)]
        public decimal? SubTotalVat { get; set; }

        /// <summary>
        /// The total amount of VAT charged over the shipping fee  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The total amount of VAT charged over the shipping fee  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="ShippingCostsVat", EmitDefaultValue=false)]
        public decimal? ShippingCostsVat { get; set; }

        /// <summary>
        /// The total value of the order including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The total value of the order including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="TotalInclVat", EmitDefaultValue=false)]
        public decimal? TotalInclVat { get; set; }

        /// <summary>
        /// The total amount of VAT charged over the total value of te order  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The total amount of VAT charged over the total value of te order  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="TotalVat", EmitDefaultValue=false)]
        public decimal? TotalVat { get; set; }

        /// <summary>
        /// The total value of the order lines including VAT  (in the currency in which the order was paid for, see CurrencyCode).
        /// </summary>
        /// <value>The total value of the order lines including VAT  (in the currency in which the order was paid for, see CurrencyCode).</value>
        [DataMember(Name="OriginalSubTotalInclVat", EmitDefaultValue=false)]
        public decimal? OriginalSubTotalInclVat { get; set; }

        /// <summary>
        /// The total amount of VAT charged over the order lines  (in the currency in which the order was paid for, see CurrencyCode).
        /// </summary>
        /// <value>The total amount of VAT charged over the order lines  (in the currency in which the order was paid for, see CurrencyCode).</value>
        [DataMember(Name="OriginalSubTotalVat", EmitDefaultValue=false)]
        public decimal? OriginalSubTotalVat { get; set; }

        /// <summary>
        /// The shipping fee including VAT  (in the currency in which the order was paid for, see CurrencyCode).
        /// </summary>
        /// <value>The shipping fee including VAT  (in the currency in which the order was paid for, see CurrencyCode).</value>
        [DataMember(Name="OriginalShippingCostsInclVat", EmitDefaultValue=false)]
        public decimal? OriginalShippingCostsInclVat { get; set; }

        /// <summary>
        /// The total amount of VAT charged over the shipping fee  (in the currency in which the order was paid for, see CurrencyCode).
        /// </summary>
        /// <value>The total amount of VAT charged over the shipping fee  (in the currency in which the order was paid for, see CurrencyCode).</value>
        [DataMember(Name="OriginalShippingCostsVat", EmitDefaultValue=false)]
        public decimal? OriginalShippingCostsVat { get; set; }

        /// <summary>
        /// The total value of the order including VAT  (in the currency in which the order was paid for, see CurrencyCode).
        /// </summary>
        /// <value>The total value of the order including VAT  (in the currency in which the order was paid for, see CurrencyCode).</value>
        [DataMember(Name="OriginalTotalInclVat", EmitDefaultValue=false)]
        public decimal? OriginalTotalInclVat { get; set; }

        /// <summary>
        /// The total amount of VAT charged over the total value of te order  (in the currency in which the order was paid for, see CurrencyCode).
        /// </summary>
        /// <value>The total amount of VAT charged over the total value of te order  (in the currency in which the order was paid for, see CurrencyCode).</value>
        [DataMember(Name="OriginalTotalVat", EmitDefaultValue=false)]
        public decimal? OriginalTotalVat { get; set; }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name="Lines", EmitDefaultValue=false)]
        public List<MerchantOrderLineResponse> Lines { get; set; }

        /// <summary>
        /// The customer&#39;s telephone number
        /// </summary>
        /// <value>The customer&#39;s telephone number</value>
        [DataMember(Name="Phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// The customer&#39;s email
        /// </summary>
        /// <value>The customer&#39;s email</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Optional. A company&#39;s chamber of commerce number
        /// </summary>
        /// <value>Optional. A company&#39;s chamber of commerce number</value>
        [DataMember(Name="CompanyRegistrationNo", EmitDefaultValue=false)]
        public string CompanyRegistrationNo { get; set; }

        /// <summary>
        /// Optional. A company&#39;s VAT number
        /// </summary>
        /// <value>Optional. A company&#39;s VAT number</value>
        [DataMember(Name="VatNo", EmitDefaultValue=false)]
        public string VatNo { get; set; }

        /// <summary>
        /// The payment method used on the order
        /// </summary>
        /// <value>The payment method used on the order</value>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// The shipping fee including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The shipping fee including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="ShippingCostsInclVat", EmitDefaultValue=false)]
        public decimal? ShippingCostsInclVat { get; set; }

        /// <summary>
        /// The currency code for the amounts of the order
        /// </summary>
        /// <value>The currency code for the amounts of the order</value>
        [DataMember(Name="CurrencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// The date the order was done
        /// </summary>
        /// <value>The date the order was done</value>
        [DataMember(Name="OrderDate", EmitDefaultValue=false)]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// The unique customer reference used by the channel
        /// </summary>
        /// <value>The unique customer reference used by the channel</value>
        [DataMember(Name="ChannelCustomerNo", EmitDefaultValue=false)]
        public string ChannelCustomerNo { get; set; }

        /// <summary>
        /// The billing or invoice address
        /// </summary>
        /// <value>The billing or invoice address</value>
        [DataMember(Name="BillingAddress", EmitDefaultValue=false)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// The shipping address
        /// </summary>
        /// <value>The shipping address</value>
        [DataMember(Name="ShippingAddress", EmitDefaultValue=false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// Extra data on the order
        /// </summary>
        /// <value>Extra data on the order</value>
        [DataMember(Name="ExtraData", EmitDefaultValue=false)]
        public Dictionary<string, string> ExtraData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantOrderResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  ChannelOrderSupport: ").Append(ChannelOrderSupport).Append("\n");
            sb.Append("  ChannelOrderNo: ").Append(ChannelOrderNo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubTotalInclVat: ").Append(SubTotalInclVat).Append("\n");
            sb.Append("  SubTotalVat: ").Append(SubTotalVat).Append("\n");
            sb.Append("  ShippingCostsVat: ").Append(ShippingCostsVat).Append("\n");
            sb.Append("  TotalInclVat: ").Append(TotalInclVat).Append("\n");
            sb.Append("  TotalVat: ").Append(TotalVat).Append("\n");
            sb.Append("  OriginalSubTotalInclVat: ").Append(OriginalSubTotalInclVat).Append("\n");
            sb.Append("  OriginalSubTotalVat: ").Append(OriginalSubTotalVat).Append("\n");
            sb.Append("  OriginalShippingCostsInclVat: ").Append(OriginalShippingCostsInclVat).Append("\n");
            sb.Append("  OriginalShippingCostsVat: ").Append(OriginalShippingCostsVat).Append("\n");
            sb.Append("  OriginalTotalInclVat: ").Append(OriginalTotalInclVat).Append("\n");
            sb.Append("  OriginalTotalVat: ").Append(OriginalTotalVat).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CompanyRegistrationNo: ").Append(CompanyRegistrationNo).Append("\n");
            sb.Append("  VatNo: ").Append(VatNo).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  ShippingCostsInclVat: ").Append(ShippingCostsInclVat).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  ChannelCustomerNo: ").Append(ChannelCustomerNo).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantOrderResponse);
        }

        /// <summary>
        /// Returns true if MerchantOrderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantOrderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantOrderResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ChannelName == input.ChannelName ||
                    (this.ChannelName != null &&
                    this.ChannelName.Equals(input.ChannelName))
                ) && 
                (
                    this.ChannelOrderSupport == input.ChannelOrderSupport ||
                    (this.ChannelOrderSupport != null &&
                    this.ChannelOrderSupport.Equals(input.ChannelOrderSupport))
                ) && 
                (
                    this.ChannelOrderNo == input.ChannelOrderNo ||
                    (this.ChannelOrderNo != null &&
                    this.ChannelOrderNo.Equals(input.ChannelOrderNo))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubTotalInclVat == input.SubTotalInclVat ||
                    (this.SubTotalInclVat != null &&
                    this.SubTotalInclVat.Equals(input.SubTotalInclVat))
                ) && 
                (
                    this.SubTotalVat == input.SubTotalVat ||
                    (this.SubTotalVat != null &&
                    this.SubTotalVat.Equals(input.SubTotalVat))
                ) && 
                (
                    this.ShippingCostsVat == input.ShippingCostsVat ||
                    (this.ShippingCostsVat != null &&
                    this.ShippingCostsVat.Equals(input.ShippingCostsVat))
                ) && 
                (
                    this.TotalInclVat == input.TotalInclVat ||
                    (this.TotalInclVat != null &&
                    this.TotalInclVat.Equals(input.TotalInclVat))
                ) && 
                (
                    this.TotalVat == input.TotalVat ||
                    (this.TotalVat != null &&
                    this.TotalVat.Equals(input.TotalVat))
                ) && 
                (
                    this.OriginalSubTotalInclVat == input.OriginalSubTotalInclVat ||
                    (this.OriginalSubTotalInclVat != null &&
                    this.OriginalSubTotalInclVat.Equals(input.OriginalSubTotalInclVat))
                ) && 
                (
                    this.OriginalSubTotalVat == input.OriginalSubTotalVat ||
                    (this.OriginalSubTotalVat != null &&
                    this.OriginalSubTotalVat.Equals(input.OriginalSubTotalVat))
                ) && 
                (
                    this.OriginalShippingCostsInclVat == input.OriginalShippingCostsInclVat ||
                    (this.OriginalShippingCostsInclVat != null &&
                    this.OriginalShippingCostsInclVat.Equals(input.OriginalShippingCostsInclVat))
                ) && 
                (
                    this.OriginalShippingCostsVat == input.OriginalShippingCostsVat ||
                    (this.OriginalShippingCostsVat != null &&
                    this.OriginalShippingCostsVat.Equals(input.OriginalShippingCostsVat))
                ) && 
                (
                    this.OriginalTotalInclVat == input.OriginalTotalInclVat ||
                    (this.OriginalTotalInclVat != null &&
                    this.OriginalTotalInclVat.Equals(input.OriginalTotalInclVat))
                ) && 
                (
                    this.OriginalTotalVat == input.OriginalTotalVat ||
                    (this.OriginalTotalVat != null &&
                    this.OriginalTotalVat.Equals(input.OriginalTotalVat))
                ) && 
                (
                    this.Lines == input.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(input.Lines)
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CompanyRegistrationNo == input.CompanyRegistrationNo ||
                    (this.CompanyRegistrationNo != null &&
                    this.CompanyRegistrationNo.Equals(input.CompanyRegistrationNo))
                ) && 
                (
                    this.VatNo == input.VatNo ||
                    (this.VatNo != null &&
                    this.VatNo.Equals(input.VatNo))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.ShippingCostsInclVat == input.ShippingCostsInclVat ||
                    (this.ShippingCostsInclVat != null &&
                    this.ShippingCostsInclVat.Equals(input.ShippingCostsInclVat))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.ChannelCustomerNo == input.ChannelCustomerNo ||
                    (this.ChannelCustomerNo != null &&
                    this.ChannelCustomerNo.Equals(input.ChannelCustomerNo))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    this.ExtraData != null &&
                    this.ExtraData.SequenceEqual(input.ExtraData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ChannelName != null)
                    hashCode = hashCode * 59 + this.ChannelName.GetHashCode();
                if (this.ChannelOrderSupport != null)
                    hashCode = hashCode * 59 + this.ChannelOrderSupport.GetHashCode();
                if (this.ChannelOrderNo != null)
                    hashCode = hashCode * 59 + this.ChannelOrderNo.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SubTotalInclVat != null)
                    hashCode = hashCode * 59 + this.SubTotalInclVat.GetHashCode();
                if (this.SubTotalVat != null)
                    hashCode = hashCode * 59 + this.SubTotalVat.GetHashCode();
                if (this.ShippingCostsVat != null)
                    hashCode = hashCode * 59 + this.ShippingCostsVat.GetHashCode();
                if (this.TotalInclVat != null)
                    hashCode = hashCode * 59 + this.TotalInclVat.GetHashCode();
                if (this.TotalVat != null)
                    hashCode = hashCode * 59 + this.TotalVat.GetHashCode();
                if (this.OriginalSubTotalInclVat != null)
                    hashCode = hashCode * 59 + this.OriginalSubTotalInclVat.GetHashCode();
                if (this.OriginalSubTotalVat != null)
                    hashCode = hashCode * 59 + this.OriginalSubTotalVat.GetHashCode();
                if (this.OriginalShippingCostsInclVat != null)
                    hashCode = hashCode * 59 + this.OriginalShippingCostsInclVat.GetHashCode();
                if (this.OriginalShippingCostsVat != null)
                    hashCode = hashCode * 59 + this.OriginalShippingCostsVat.GetHashCode();
                if (this.OriginalTotalInclVat != null)
                    hashCode = hashCode * 59 + this.OriginalTotalInclVat.GetHashCode();
                if (this.OriginalTotalVat != null)
                    hashCode = hashCode * 59 + this.OriginalTotalVat.GetHashCode();
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.CompanyRegistrationNo != null)
                    hashCode = hashCode * 59 + this.CompanyRegistrationNo.GetHashCode();
                if (this.VatNo != null)
                    hashCode = hashCode * 59 + this.VatNo.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.ShippingCostsInclVat != null)
                    hashCode = hashCode * 59 + this.ShippingCostsInclVat.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.ChannelCustomerNo != null)
                    hashCode = hashCode * 59 + this.ChannelCustomerNo.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.ExtraData != null)
                    hashCode = hashCode * 59 + this.ExtraData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Phone (string) maxLength
            if(this.Phone != null && this.Phone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 20.", new [] { "Phone" });
            }

            // Phone (string) minLength
            if(this.Phone != null && this.Phone.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be greater than 0.", new [] { "Phone" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 250.", new [] { "Email" });
            }

            // Email (string) minLength
            if(this.Email != null && this.Email.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 0.", new [] { "Email" });
            }

            // CompanyRegistrationNo (string) maxLength
            if(this.CompanyRegistrationNo != null && this.CompanyRegistrationNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyRegistrationNo, length must be less than 50.", new [] { "CompanyRegistrationNo" });
            }

            // CompanyRegistrationNo (string) minLength
            if(this.CompanyRegistrationNo != null && this.CompanyRegistrationNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyRegistrationNo, length must be greater than 0.", new [] { "CompanyRegistrationNo" });
            }

            // VatNo (string) maxLength
            if(this.VatNo != null && this.VatNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNo, length must be less than 50.", new [] { "VatNo" });
            }

            // VatNo (string) minLength
            if(this.VatNo != null && this.VatNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNo, length must be greater than 0.", new [] { "VatNo" });
            }

            // PaymentMethod (string) maxLength
            if(this.PaymentMethod != null && this.PaymentMethod.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethod, length must be less than 50.", new [] { "PaymentMethod" });
            }

            // PaymentMethod (string) minLength
            if(this.PaymentMethod != null && this.PaymentMethod.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethod, length must be greater than 0.", new [] { "PaymentMethod" });
            }

            // ChannelCustomerNo (string) maxLength
            if(this.ChannelCustomerNo != null && this.ChannelCustomerNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelCustomerNo, length must be less than 50.", new [] { "ChannelCustomerNo" });
            }

            // ChannelCustomerNo (string) minLength
            if(this.ChannelCustomerNo != null && this.ChannelCustomerNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelCustomerNo, length must be greater than 0.", new [] { "ChannelCustomerNo" });
            }

            yield break;
        }
    }

}
