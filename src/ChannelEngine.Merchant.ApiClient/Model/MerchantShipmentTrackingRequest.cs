/* 
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ChannelEngine.Merchant.ApiClient.Client.SwaggerDateConverter;

namespace ChannelEngine.Merchant.ApiClient.Model
{
    /// <summary>
    /// MerchantShipmentTrackingRequest
    /// </summary>
    [DataContract]
    public partial class MerchantShipmentTrackingRequest :  IEquatable<MerchantShipmentTrackingRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantShipmentTrackingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantShipmentTrackingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantShipmentTrackingRequest" /> class.
        /// </summary>
        /// <param name="method">Shipment method (carrier) (required).</param>
        /// <param name="trackTraceNo">The unique shipping reference used by the Shipping carrier (track &amp;amp; trace number) (required).</param>
        /// <param name="trackTraceUrl">A link to a page of the carrier where the customer can track the shipping of her package..</param>
        public MerchantShipmentTrackingRequest(string method = default(string), string trackTraceNo = default(string), string trackTraceUrl = default(string))
        {
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for MerchantShipmentTrackingRequest and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            // to ensure "trackTraceNo" is required (not null)
            if (trackTraceNo == null)
            {
                throw new InvalidDataException("trackTraceNo is a required property for MerchantShipmentTrackingRequest and cannot be null");
            }
            else
            {
                this.TrackTraceNo = trackTraceNo;
            }
            this.TrackTraceUrl = trackTraceUrl;
        }
        
        /// <summary>
        /// Shipment method (carrier)
        /// </summary>
        /// <value>Shipment method (carrier)</value>
        [DataMember(Name="Method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// The unique shipping reference used by the Shipping carrier (track &amp;amp; trace number)
        /// </summary>
        /// <value>The unique shipping reference used by the Shipping carrier (track &amp;amp; trace number)</value>
        [DataMember(Name="TrackTraceNo", EmitDefaultValue=false)]
        public string TrackTraceNo { get; set; }

        /// <summary>
        /// A link to a page of the carrier where the customer can track the shipping of her package.
        /// </summary>
        /// <value>A link to a page of the carrier where the customer can track the shipping of her package.</value>
        [DataMember(Name="TrackTraceUrl", EmitDefaultValue=false)]
        public string TrackTraceUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantShipmentTrackingRequest {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  TrackTraceNo: ").Append(TrackTraceNo).Append("\n");
            sb.Append("  TrackTraceUrl: ").Append(TrackTraceUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantShipmentTrackingRequest);
        }

        /// <summary>
        /// Returns true if MerchantShipmentTrackingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantShipmentTrackingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantShipmentTrackingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.TrackTraceNo == input.TrackTraceNo ||
                    (this.TrackTraceNo != null &&
                    this.TrackTraceNo.Equals(input.TrackTraceNo))
                ) && 
                (
                    this.TrackTraceUrl == input.TrackTraceUrl ||
                    (this.TrackTraceUrl != null &&
                    this.TrackTraceUrl.Equals(input.TrackTraceUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.TrackTraceNo != null)
                    hashCode = hashCode * 59 + this.TrackTraceNo.GetHashCode();
                if (this.TrackTraceUrl != null)
                    hashCode = hashCode * 59 + this.TrackTraceUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}
