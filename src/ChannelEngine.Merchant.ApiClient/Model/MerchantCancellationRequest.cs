/* 
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ChannelEngine.Merchant.ApiClient.Client.SwaggerDateConverter;

namespace ChannelEngine.Merchant.ApiClient.Model
{
    /// <summary>
    /// MerchantCancellationRequest
    /// </summary>
    [DataContract]
    public partial class MerchantCancellationRequest :  IEquatable<MerchantCancellationRequest>
    {
        /// <summary>
        /// Reason code for cancellation
        /// </summary>
        /// <value>Reason code for cancellation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonCodeEnum
        {
            
            /// <summary>
            /// Enum NOTINSTOCK for value: NOT_IN_STOCK
            /// </summary>
            [EnumMember(Value = "NOT_IN_STOCK")]
            NOTINSTOCK = 1,
            
            /// <summary>
            /// Enum DAMAGED for value: DAMAGED
            /// </summary>
            [EnumMember(Value = "DAMAGED")]
            DAMAGED = 2,
            
            /// <summary>
            /// Enum INCOMPLETE for value: INCOMPLETE
            /// </summary>
            [EnumMember(Value = "INCOMPLETE")]
            INCOMPLETE = 3,
            
            /// <summary>
            /// Enum CLIENTCANCELLED for value: CLIENT_CANCELLED
            /// </summary>
            [EnumMember(Value = "CLIENT_CANCELLED")]
            CLIENTCANCELLED = 4,
            
            /// <summary>
            /// Enum INVALIDADDRESS for value: INVALID_ADDRESS
            /// </summary>
            [EnumMember(Value = "INVALID_ADDRESS")]
            INVALIDADDRESS = 5,
            
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 6
        }

        /// <summary>
        /// Reason code for cancellation
        /// </summary>
        /// <value>Reason code for cancellation</value>
        [DataMember(Name="ReasonCode", EmitDefaultValue=false)]
        public ReasonCodeEnum? ReasonCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantCancellationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantCancellationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantCancellationRequest" /> class.
        /// </summary>
        /// <param name="merchantCancellationNo">The unique cancellation reference used by the Merchant (sku) (required).</param>
        /// <param name="merchantOrderNo">The unique order reference used by the Merchant (sku) (required).</param>
        /// <param name="lines">lines (required).</param>
        /// <param name="reason">Reason for cancellation (text).</param>
        /// <param name="reasonCode">Reason code for cancellation.</param>
        public MerchantCancellationRequest(string merchantCancellationNo = default(string), string merchantOrderNo = default(string), List<MerchantCancellationLineRequest> lines = default(List<MerchantCancellationLineRequest>), string reason = default(string), ReasonCodeEnum? reasonCode = default(ReasonCodeEnum?))
        {
            // to ensure "merchantCancellationNo" is required (not null)
            if (merchantCancellationNo == null)
            {
                throw new InvalidDataException("merchantCancellationNo is a required property for MerchantCancellationRequest and cannot be null");
            }
            else
            {
                this.MerchantCancellationNo = merchantCancellationNo;
            }
            // to ensure "merchantOrderNo" is required (not null)
            if (merchantOrderNo == null)
            {
                throw new InvalidDataException("merchantOrderNo is a required property for MerchantCancellationRequest and cannot be null");
            }
            else
            {
                this.MerchantOrderNo = merchantOrderNo;
            }
            // to ensure "lines" is required (not null)
            if (lines == null)
            {
                throw new InvalidDataException("lines is a required property for MerchantCancellationRequest and cannot be null");
            }
            else
            {
                this.Lines = lines;
            }
            this.Reason = reason;
            this.ReasonCode = reasonCode;
        }
        
        /// <summary>
        /// The unique cancellation reference used by the Merchant (sku)
        /// </summary>
        /// <value>The unique cancellation reference used by the Merchant (sku)</value>
        [DataMember(Name="MerchantCancellationNo", EmitDefaultValue=false)]
        public string MerchantCancellationNo { get; set; }

        /// <summary>
        /// The unique order reference used by the Merchant (sku)
        /// </summary>
        /// <value>The unique order reference used by the Merchant (sku)</value>
        [DataMember(Name="MerchantOrderNo", EmitDefaultValue=false)]
        public string MerchantOrderNo { get; set; }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name="Lines", EmitDefaultValue=false)]
        public List<MerchantCancellationLineRequest> Lines { get; set; }

        /// <summary>
        /// Reason for cancellation (text)
        /// </summary>
        /// <value>Reason for cancellation (text)</value>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public string Reason { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantCancellationRequest {\n");
            sb.Append("  MerchantCancellationNo: ").Append(MerchantCancellationNo).Append("\n");
            sb.Append("  MerchantOrderNo: ").Append(MerchantOrderNo).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantCancellationRequest);
        }

        /// <summary>
        /// Returns true if MerchantCancellationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantCancellationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantCancellationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantCancellationNo == input.MerchantCancellationNo ||
                    (this.MerchantCancellationNo != null &&
                    this.MerchantCancellationNo.Equals(input.MerchantCancellationNo))
                ) && 
                (
                    this.MerchantOrderNo == input.MerchantOrderNo ||
                    (this.MerchantOrderNo != null &&
                    this.MerchantOrderNo.Equals(input.MerchantOrderNo))
                ) && 
                (
                    this.Lines == input.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(input.Lines)
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    (this.ReasonCode != null &&
                    this.ReasonCode.Equals(input.ReasonCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantCancellationNo != null)
                    hashCode = hashCode * 59 + this.MerchantCancellationNo.GetHashCode();
                if (this.MerchantOrderNo != null)
                    hashCode = hashCode * 59 + this.MerchantOrderNo.GetHashCode();
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                return hashCode;
            }
        }
    }

}
