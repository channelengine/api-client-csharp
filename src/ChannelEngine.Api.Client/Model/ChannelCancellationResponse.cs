/* 
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ChannelEngine.Api.Client.Model
{
    /// <summary>
    /// ChannelCancellationResponse
    /// </summary>
    [DataContract]
    public partial class ChannelCancellationResponse :  IEquatable<ChannelCancellationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCancellationResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelCancellationResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelCancellationResponse" /> class.
        /// </summary>
        /// <param name="ChannelOrderNo">ChannelOrderNo (required).</param>
        /// <param name="Lines">Lines (required).</param>
        /// <param name="Reason">Reason.</param>
        public ChannelCancellationResponse(string ChannelOrderNo = default(string), List<ChannelCancellationLineResponse> Lines = default(List<ChannelCancellationLineResponse>), string Reason = default(string))
        {
            // to ensure "ChannelOrderNo" is required (not null)
            if (ChannelOrderNo == null)
            {
                throw new InvalidDataException("ChannelOrderNo is a required property for ChannelCancellationResponse and cannot be null");
            }
            else
            {
                this.ChannelOrderNo = ChannelOrderNo;
            }
            // to ensure "Lines" is required (not null)
            if (Lines == null)
            {
                throw new InvalidDataException("Lines is a required property for ChannelCancellationResponse and cannot be null");
            }
            else
            {
                this.Lines = Lines;
            }
            this.Reason = Reason;
        }
        
        /// <summary>
        /// Gets or Sets ChannelOrderNo
        /// </summary>
        [DataMember(Name="ChannelOrderNo", EmitDefaultValue=false)]
        public string ChannelOrderNo { get; set; }
        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name="Lines", EmitDefaultValue=false)]
        public List<ChannelCancellationLineResponse> Lines { get; set; }
        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelCancellationResponse {\n");
            sb.Append("  ChannelOrderNo: ").Append(ChannelOrderNo).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelCancellationResponse);
        }

        /// <summary>
        /// Returns true if ChannelCancellationResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelCancellationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelCancellationResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChannelOrderNo == other.ChannelOrderNo ||
                    this.ChannelOrderNo != null &&
                    this.ChannelOrderNo.Equals(other.ChannelOrderNo)
                ) && 
                (
                    this.Lines == other.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(other.Lines)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChannelOrderNo != null)
                    hash = hash * 59 + this.ChannelOrderNo.GetHashCode();
                if (this.Lines != null)
                    hash = hash * 59 + this.Lines.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
