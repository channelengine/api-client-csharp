/* 
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ChannelEngine.Api.Client.Model
{
    /// <summary>
    /// MerchantOrderLineResponse
    /// </summary>
    [DataContract]
    public partial class MerchantOrderLineResponse :  IEquatable<MerchantOrderLineResponse>, IValidatableObject
    {
        /// <summary>
        /// The condition of the product, this can be used to indicate that a product is a second-hand product
        /// </summary>
        /// <value>The condition of the product, this can be used to indicate that a product is a second-hand product</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConditionEnum
        {
            
            /// <summary>
            /// Enum NEW for "NEW"
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW,
            
            /// <summary>
            /// Enum NEWREFURBISHED for "NEW_REFURBISHED"
            /// </summary>
            [EnumMember(Value = "NEW_REFURBISHED")]
            NEWREFURBISHED,
            
            /// <summary>
            /// Enum USEDASNEW for "USED_AS_NEW"
            /// </summary>
            [EnumMember(Value = "USED_AS_NEW")]
            USEDASNEW,
            
            /// <summary>
            /// Enum USEDGOOD for "USED_GOOD"
            /// </summary>
            [EnumMember(Value = "USED_GOOD")]
            USEDGOOD,
            
            /// <summary>
            /// Enum USEDREASONABLE for "USED_REASONABLE"
            /// </summary>
            [EnumMember(Value = "USED_REASONABLE")]
            USEDREASONABLE,
            
            /// <summary>
            /// Enum USEDMEDIOCRE for "USED_MEDIOCRE"
            /// </summary>
            [EnumMember(Value = "USED_MEDIOCRE")]
            USEDMEDIOCRE,
            
            /// <summary>
            /// Enum UNKNOWN for "UNKNOWN"
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN
        }

        /// <summary>
        /// The condition of the product, this can be used to indicate that a product is a second-hand product
        /// </summary>
        /// <value>The condition of the product, this can be used to indicate that a product is a second-hand product</value>
        [DataMember(Name="Condition", EmitDefaultValue=false)]
        public ConditionEnum? Condition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantOrderLineResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantOrderLineResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantOrderLineResponse" /> class.
        /// </summary>
        /// <param name="MerchantProductNo">MerchantProductNo.</param>
        /// <param name="ChannelProductNo">ChannelProductNo (required).</param>
        /// <param name="Quantity">Quantity (required).</param>
        /// <param name="UnitPriceInclVat">The value of a single unit of the ordered product including VAT  (in the tenant&#39;s base currency calculated using the exchange rate at the time of ordering). (required).</param>
        /// <param name="FeeFixed">A fixed fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable..</param>
        /// <param name="FeeRate">A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable..</param>
        /// <param name="Condition">The condition of the product, this can be used to indicate that a product is a second-hand product.</param>
        public MerchantOrderLineResponse(string MerchantProductNo = default(string), string ChannelProductNo = default(string), int? Quantity = default(int?), double? UnitPriceInclVat = default(double?), double? FeeFixed = default(double?), double? FeeRate = default(double?), ConditionEnum? Condition = default(ConditionEnum?))
        {
            // to ensure "ChannelProductNo" is required (not null)
            if (ChannelProductNo == null)
            {
                throw new InvalidDataException("ChannelProductNo is a required property for MerchantOrderLineResponse and cannot be null");
            }
            else
            {
                this.ChannelProductNo = ChannelProductNo;
            }
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for MerchantOrderLineResponse and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            // to ensure "UnitPriceInclVat" is required (not null)
            if (UnitPriceInclVat == null)
            {
                throw new InvalidDataException("UnitPriceInclVat is a required property for MerchantOrderLineResponse and cannot be null");
            }
            else
            {
                this.UnitPriceInclVat = UnitPriceInclVat;
            }
            this.MerchantProductNo = MerchantProductNo;
            this.FeeFixed = FeeFixed;
            this.FeeRate = FeeRate;
            this.Condition = Condition;
        }
        
        /// <summary>
        /// Gets or Sets MerchantProductNo
        /// </summary>
        [DataMember(Name="MerchantProductNo", EmitDefaultValue=false)]
        public string MerchantProductNo { get; set; }
        /// <summary>
        /// Gets or Sets ChannelProductNo
        /// </summary>
        [DataMember(Name="ChannelProductNo", EmitDefaultValue=false)]
        public string ChannelProductNo { get; set; }
        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// The value of a single unit of the ordered product including VAT  (in the tenant&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The value of a single unit of the ordered product including VAT  (in the tenant&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="UnitPriceInclVat", EmitDefaultValue=false)]
        public double? UnitPriceInclVat { get; set; }
        /// <summary>
        /// A fixed fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.
        /// </summary>
        /// <value>A fixed fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.</value>
        [DataMember(Name="FeeFixed", EmitDefaultValue=false)]
        public double? FeeFixed { get; set; }
        /// <summary>
        /// A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.
        /// </summary>
        /// <value>A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable.</value>
        [DataMember(Name="FeeRate", EmitDefaultValue=false)]
        public double? FeeRate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantOrderLineResponse {\n");
            sb.Append("  MerchantProductNo: ").Append(MerchantProductNo).Append("\n");
            sb.Append("  ChannelProductNo: ").Append(ChannelProductNo).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPriceInclVat: ").Append(UnitPriceInclVat).Append("\n");
            sb.Append("  FeeFixed: ").Append(FeeFixed).Append("\n");
            sb.Append("  FeeRate: ").Append(FeeRate).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MerchantOrderLineResponse);
        }

        /// <summary>
        /// Returns true if MerchantOrderLineResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of MerchantOrderLineResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantOrderLineResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MerchantProductNo == other.MerchantProductNo ||
                    this.MerchantProductNo != null &&
                    this.MerchantProductNo.Equals(other.MerchantProductNo)
                ) && 
                (
                    this.ChannelProductNo == other.ChannelProductNo ||
                    this.ChannelProductNo != null &&
                    this.ChannelProductNo.Equals(other.ChannelProductNo)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.UnitPriceInclVat == other.UnitPriceInclVat ||
                    this.UnitPriceInclVat != null &&
                    this.UnitPriceInclVat.Equals(other.UnitPriceInclVat)
                ) && 
                (
                    this.FeeFixed == other.FeeFixed ||
                    this.FeeFixed != null &&
                    this.FeeFixed.Equals(other.FeeFixed)
                ) && 
                (
                    this.FeeRate == other.FeeRate ||
                    this.FeeRate != null &&
                    this.FeeRate.Equals(other.FeeRate)
                ) && 
                (
                    this.Condition == other.Condition ||
                    this.Condition != null &&
                    this.Condition.Equals(other.Condition)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MerchantProductNo != null)
                    hash = hash * 59 + this.MerchantProductNo.GetHashCode();
                if (this.ChannelProductNo != null)
                    hash = hash * 59 + this.ChannelProductNo.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.UnitPriceInclVat != null)
                    hash = hash * 59 + this.UnitPriceInclVat.GetHashCode();
                if (this.FeeFixed != null)
                    hash = hash * 59 + this.FeeFixed.GetHashCode();
                if (this.FeeRate != null)
                    hash = hash * 59 + this.FeeRate.GetHashCode();
                if (this.Condition != null)
                    hash = hash * 59 + this.Condition.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // ChannelProductNo (string) maxLength
            if(this.ChannelProductNo != null && this.ChannelProductNo.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ChannelProductNo, length must be less than 50.", new [] { "ChannelProductNo" });
            }

            // ChannelProductNo (string) minLength
            if(this.ChannelProductNo != null && this.ChannelProductNo.Length < 0)
            {
                yield return new ValidationResult("Invalid value for ChannelProductNo, length must be greater than 0.", new [] { "ChannelProductNo" });
            }

            yield break;
        }
    }

}
