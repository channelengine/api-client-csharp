/* 
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChannelEngine.Api.Client.Client.SwaggerDateConverter;

namespace ChannelEngine.Api.Client.Model
{
    /// <summary>
    /// MerchantOrderResponse
    /// </summary>
    [DataContract]
    public partial class MerchantOrderResponse :  IEquatable<MerchantOrderResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ChannelOrderSupport
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelOrderSupportEnum
        {
            
            /// <summary>
            /// Enum NONE for "NONE"
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE,
            
            /// <summary>
            /// Enum ORDERS for "ORDERS"
            /// </summary>
            [EnumMember(Value = "ORDERS")]
            ORDERS,
            
            /// <summary>
            /// Enum SPLITORDERS for "SPLIT_ORDERS"
            /// </summary>
            [EnumMember(Value = "SPLIT_ORDERS")]
            SPLITORDERS,
            
            /// <summary>
            /// Enum SPLITORDERLINES for "SPLIT_ORDER_LINES"
            /// </summary>
            [EnumMember(Value = "SPLIT_ORDER_LINES")]
            SPLITORDERLINES
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum INPROGRESS for "IN_PROGRESS"
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS,
            
            /// <summary>
            /// Enum SHIPPED for "SHIPPED"
            /// </summary>
            [EnumMember(Value = "SHIPPED")]
            SHIPPED,
            
            /// <summary>
            /// Enum INBACKORDER for "IN_BACKORDER"
            /// </summary>
            [EnumMember(Value = "IN_BACKORDER")]
            INBACKORDER,
            
            /// <summary>
            /// Enum CANCELED for "CANCELED"
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED,
            
            /// <summary>
            /// Enum MANCO for "MANCO"
            /// </summary>
            [EnumMember(Value = "MANCO")]
            MANCO,
            
            /// <summary>
            /// Enum INCOMBI for "IN_COMBI"
            /// </summary>
            [EnumMember(Value = "IN_COMBI")]
            INCOMBI,
            
            /// <summary>
            /// Enum CLOSED for "CLOSED"
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED,
            
            /// <summary>
            /// Enum NEW for "NEW"
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW,
            
            /// <summary>
            /// Enum RETURNED for "RETURNED"
            /// </summary>
            [EnumMember(Value = "RETURNED")]
            RETURNED,
            
            /// <summary>
            /// Enum REQUIRESCORRECTION for "REQUIRES_CORRECTION"
            /// </summary>
            [EnumMember(Value = "REQUIRES_CORRECTION")]
            REQUIRESCORRECTION
        }

        /// <summary>
        /// Gets or Sets ChannelOrderSupport
        /// </summary>
        [DataMember(Name="ChannelOrderSupport", EmitDefaultValue=false)]
        public ChannelOrderSupportEnum? ChannelOrderSupport { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantOrderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantOrderResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantOrderResponse" /> class.
        /// </summary>
        /// <param name="Id">The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order..</param>
        /// <param name="ChannelName">ChannelName.</param>
        /// <param name="ChannelOrderSupport">ChannelOrderSupport.</param>
        /// <param name="ChannelOrderNo">ChannelOrderNo.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Lines">Lines.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="CompanyRegistrationNo">CompanyRegistrationNo.</param>
        /// <param name="VatNo">VatNo.</param>
        /// <param name="PaymentMethod">PaymentMethod (required).</param>
        /// <param name="ShippingCostsInclVat">The shipping fee including VAT  (in the tenant&#39;s base currency calculated using the exchange rate at the time of ordering). (required).</param>
        /// <param name="CurrencyCode">CurrencyCode (required).</param>
        /// <param name="OrderDate">OrderDate (required).</param>
        /// <param name="ChannelCustomerNo">ChannelCustomerNo.</param>
        /// <param name="BillingAddress">BillingAddress (required).</param>
        /// <param name="ShippingAddress">ShippingAddress (required).</param>
        /// <param name="ExtraData">ExtraData.</param>
        public MerchantOrderResponse(int? Id = default(int?), string ChannelName = default(string), ChannelOrderSupportEnum? ChannelOrderSupport = default(ChannelOrderSupportEnum?), string ChannelOrderNo = default(string), StatusEnum? Status = default(StatusEnum?), List<MerchantOrderLineResponse> Lines = default(List<MerchantOrderLineResponse>), string Phone = default(string), string Email = default(string), string CompanyRegistrationNo = default(string), string VatNo = default(string), string PaymentMethod = default(string), double? ShippingCostsInclVat = default(double?), string CurrencyCode = default(string), DateTime? OrderDate = default(DateTime?), string ChannelCustomerNo = default(string), EntitiesAddressModels BillingAddress = default(EntitiesAddressModels), EntitiesAddressModels ShippingAddress = default(EntitiesAddressModels), Dictionary<string, string> ExtraData = default(Dictionary<string, string>))
        {
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "PaymentMethod" is required (not null)
            if (PaymentMethod == null)
            {
                throw new InvalidDataException("PaymentMethod is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.PaymentMethod = PaymentMethod;
            }
            // to ensure "ShippingCostsInclVat" is required (not null)
            if (ShippingCostsInclVat == null)
            {
                throw new InvalidDataException("ShippingCostsInclVat is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.ShippingCostsInclVat = ShippingCostsInclVat;
            }
            // to ensure "CurrencyCode" is required (not null)
            if (CurrencyCode == null)
            {
                throw new InvalidDataException("CurrencyCode is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.CurrencyCode = CurrencyCode;
            }
            // to ensure "OrderDate" is required (not null)
            if (OrderDate == null)
            {
                throw new InvalidDataException("OrderDate is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.OrderDate = OrderDate;
            }
            // to ensure "BillingAddress" is required (not null)
            if (BillingAddress == null)
            {
                throw new InvalidDataException("BillingAddress is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.BillingAddress = BillingAddress;
            }
            // to ensure "ShippingAddress" is required (not null)
            if (ShippingAddress == null)
            {
                throw new InvalidDataException("ShippingAddress is a required property for MerchantOrderResponse and cannot be null");
            }
            else
            {
                this.ShippingAddress = ShippingAddress;
            }
            this.Id = Id;
            this.ChannelName = ChannelName;
            this.ChannelOrderSupport = ChannelOrderSupport;
            this.ChannelOrderNo = ChannelOrderNo;
            this.Status = Status;
            this.Lines = Lines;
            this.Phone = Phone;
            this.CompanyRegistrationNo = CompanyRegistrationNo;
            this.VatNo = VatNo;
            this.ChannelCustomerNo = ChannelCustomerNo;
            this.ExtraData = ExtraData;
        }
        
        /// <summary>
        /// The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order.
        /// </summary>
        /// <value>The unique identifier used by ChannelEngine. This identifier does  not have to be saved. It should only be used in a call to acknowledge the order.</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets ChannelName
        /// </summary>
        [DataMember(Name="ChannelName", EmitDefaultValue=false)]
        public string ChannelName { get; set; }


        /// <summary>
        /// Gets or Sets ChannelOrderNo
        /// </summary>
        [DataMember(Name="ChannelOrderNo", EmitDefaultValue=false)]
        public string ChannelOrderNo { get; set; }


        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name="Lines", EmitDefaultValue=false)]
        public List<MerchantOrderLineResponse> Lines { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="Phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets CompanyRegistrationNo
        /// </summary>
        [DataMember(Name="CompanyRegistrationNo", EmitDefaultValue=false)]
        public string CompanyRegistrationNo { get; set; }

        /// <summary>
        /// Gets or Sets VatNo
        /// </summary>
        [DataMember(Name="VatNo", EmitDefaultValue=false)]
        public string VatNo { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// The shipping fee including VAT  (in the tenant&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The shipping fee including VAT  (in the tenant&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="ShippingCostsInclVat", EmitDefaultValue=false)]
        public double? ShippingCostsInclVat { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="CurrencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name="OrderDate", EmitDefaultValue=false)]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets ChannelCustomerNo
        /// </summary>
        [DataMember(Name="ChannelCustomerNo", EmitDefaultValue=false)]
        public string ChannelCustomerNo { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="BillingAddress", EmitDefaultValue=false)]
        public EntitiesAddressModels BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="ShippingAddress", EmitDefaultValue=false)]
        public EntitiesAddressModels ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [DataMember(Name="ExtraData", EmitDefaultValue=false)]
        public Dictionary<string, string> ExtraData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantOrderResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  ChannelOrderSupport: ").Append(ChannelOrderSupport).Append("\n");
            sb.Append("  ChannelOrderNo: ").Append(ChannelOrderNo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CompanyRegistrationNo: ").Append(CompanyRegistrationNo).Append("\n");
            sb.Append("  VatNo: ").Append(VatNo).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  ShippingCostsInclVat: ").Append(ShippingCostsInclVat).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  ChannelCustomerNo: ").Append(ChannelCustomerNo).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantOrderResponse);
        }

        /// <summary>
        /// Returns true if MerchantOrderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantOrderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantOrderResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ChannelName == input.ChannelName ||
                    (this.ChannelName != null &&
                    this.ChannelName.Equals(input.ChannelName))
                ) && 
                (
                    this.ChannelOrderSupport == input.ChannelOrderSupport ||
                    (this.ChannelOrderSupport != null &&
                    this.ChannelOrderSupport.Equals(input.ChannelOrderSupport))
                ) && 
                (
                    this.ChannelOrderNo == input.ChannelOrderNo ||
                    (this.ChannelOrderNo != null &&
                    this.ChannelOrderNo.Equals(input.ChannelOrderNo))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Lines == input.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(input.Lines)
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CompanyRegistrationNo == input.CompanyRegistrationNo ||
                    (this.CompanyRegistrationNo != null &&
                    this.CompanyRegistrationNo.Equals(input.CompanyRegistrationNo))
                ) && 
                (
                    this.VatNo == input.VatNo ||
                    (this.VatNo != null &&
                    this.VatNo.Equals(input.VatNo))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.ShippingCostsInclVat == input.ShippingCostsInclVat ||
                    (this.ShippingCostsInclVat != null &&
                    this.ShippingCostsInclVat.Equals(input.ShippingCostsInclVat))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.ChannelCustomerNo == input.ChannelCustomerNo ||
                    (this.ChannelCustomerNo != null &&
                    this.ChannelCustomerNo.Equals(input.ChannelCustomerNo))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    this.ExtraData != null &&
                    this.ExtraData.SequenceEqual(input.ExtraData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ChannelName != null)
                    hashCode = hashCode * 59 + this.ChannelName.GetHashCode();
                if (this.ChannelOrderSupport != null)
                    hashCode = hashCode * 59 + this.ChannelOrderSupport.GetHashCode();
                if (this.ChannelOrderNo != null)
                    hashCode = hashCode * 59 + this.ChannelOrderNo.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.CompanyRegistrationNo != null)
                    hashCode = hashCode * 59 + this.CompanyRegistrationNo.GetHashCode();
                if (this.VatNo != null)
                    hashCode = hashCode * 59 + this.VatNo.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.ShippingCostsInclVat != null)
                    hashCode = hashCode * 59 + this.ShippingCostsInclVat.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.ChannelCustomerNo != null)
                    hashCode = hashCode * 59 + this.ChannelCustomerNo.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.ExtraData != null)
                    hashCode = hashCode * 59 + this.ExtraData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Phone (string) maxLength
            if(this.Phone != null && this.Phone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 20.", new [] { "Phone" });
            }

            // Phone (string) minLength
            if(this.Phone != null && this.Phone.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be greater than 0.", new [] { "Phone" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 250.", new [] { "Email" });
            }

            // Email (string) minLength
            if(this.Email != null && this.Email.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 0.", new [] { "Email" });
            }

            // CompanyRegistrationNo (string) maxLength
            if(this.CompanyRegistrationNo != null && this.CompanyRegistrationNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyRegistrationNo, length must be less than 50.", new [] { "CompanyRegistrationNo" });
            }

            // CompanyRegistrationNo (string) minLength
            if(this.CompanyRegistrationNo != null && this.CompanyRegistrationNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyRegistrationNo, length must be greater than 0.", new [] { "CompanyRegistrationNo" });
            }

            // VatNo (string) maxLength
            if(this.VatNo != null && this.VatNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNo, length must be less than 50.", new [] { "VatNo" });
            }

            // VatNo (string) minLength
            if(this.VatNo != null && this.VatNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNo, length must be greater than 0.", new [] { "VatNo" });
            }

            // PaymentMethod (string) maxLength
            if(this.PaymentMethod != null && this.PaymentMethod.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethod, length must be less than 50.", new [] { "PaymentMethod" });
            }

            // PaymentMethod (string) minLength
            if(this.PaymentMethod != null && this.PaymentMethod.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethod, length must be greater than 0.", new [] { "PaymentMethod" });
            }

            // ChannelCustomerNo (string) maxLength
            if(this.ChannelCustomerNo != null && this.ChannelCustomerNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelCustomerNo, length must be less than 50.", new [] { "ChannelCustomerNo" });
            }

            // ChannelCustomerNo (string) minLength
            if(this.ChannelCustomerNo != null && this.ChannelCustomerNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelCustomerNo, length must be greater than 0.", new [] { "ChannelCustomerNo" });
            }

            yield break;
        }
    }

}
