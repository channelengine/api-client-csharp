/* 
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace ChannelEngine.Api.Client.Model
{
    /// <summary>
    /// ChannelProcessedChangesRequest
    /// </summary>
    [DataContract]
    public partial class ChannelProcessedChangesRequest :  IEquatable<ChannelProcessedChangesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelProcessedChangesRequest" /> class.
        /// </summary>
        /// <param name="Created">A collection of pairs of merchant and channel references  of the products which are successfully created. The channel references  are saved such that in subsequent calls these can be used instead of the   merchant references..</param>
        /// <param name="Updated">The channel references of the products which are successfully updated..</param>
        /// <param name="Removed">The channel references of the products which are successfully removed..</param>
        public ChannelProcessedChangesRequest(List<ChannelReferencesRequest> Created = default(List<ChannelReferencesRequest>), List<string> Updated = default(List<string>), List<string> Removed = default(List<string>))
        {
            this.Created = Created;
            this.Updated = Updated;
            this.Removed = Removed;
        }
        
        /// <summary>
        /// A collection of pairs of merchant and channel references  of the products which are successfully created. The channel references  are saved such that in subsequent calls these can be used instead of the   merchant references.
        /// </summary>
        /// <value>A collection of pairs of merchant and channel references  of the products which are successfully created. The channel references  are saved such that in subsequent calls these can be used instead of the   merchant references.</value>
        [DataMember(Name="Created", EmitDefaultValue=false)]
        public List<ChannelReferencesRequest> Created { get; set; }
        /// <summary>
        /// The channel references of the products which are successfully updated.
        /// </summary>
        /// <value>The channel references of the products which are successfully updated.</value>
        [DataMember(Name="Updated", EmitDefaultValue=false)]
        public List<string> Updated { get; set; }
        /// <summary>
        /// The channel references of the products which are successfully removed.
        /// </summary>
        /// <value>The channel references of the products which are successfully removed.</value>
        [DataMember(Name="Removed", EmitDefaultValue=false)]
        public List<string> Removed { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelProcessedChangesRequest {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Removed: ").Append(Removed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChannelProcessedChangesRequest);
        }

        /// <summary>
        /// Returns true if ChannelProcessedChangesRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ChannelProcessedChangesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelProcessedChangesRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.SequenceEqual(other.Created)
                ) && 
                (
                    this.Updated == other.Updated ||
                    this.Updated != null &&
                    this.Updated.SequenceEqual(other.Updated)
                ) && 
                (
                    this.Removed == other.Removed ||
                    this.Removed != null &&
                    this.Removed.SequenceEqual(other.Removed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Updated != null)
                    hash = hash * 59 + this.Updated.GetHashCode();
                if (this.Removed != null)
                    hash = hash * 59 + this.Removed.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
