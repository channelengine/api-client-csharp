/* 
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChannelEngine.Api.Client.Client.SwaggerDateConverter;

namespace ChannelEngine.Api.Client.Model
{
    /// <summary>
    /// ChannelOrderRequest
    /// </summary>
    [DataContract]
    public partial class ChannelOrderRequest :  IEquatable<ChannelOrderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelOrderRequest" /> class.
        /// </summary>
        /// <param name="ChannelOrderNo">The unique order reference used by the Channel (required).</param>
        /// <param name="Lines">The order lines (required).</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="CompanyRegistrationNo">CompanyRegistrationNo.</param>
        /// <param name="VatNo">VatNo.</param>
        /// <param name="PaymentMethod">PaymentMethod (required).</param>
        /// <param name="ShippingCostsInclVat">The shipping fee including VAT  (in the tenant&#39;s base currency calculated using the exchange rate at the time of ordering). (required).</param>
        /// <param name="CurrencyCode">CurrencyCode (required).</param>
        /// <param name="OrderDate">OrderDate (required).</param>
        /// <param name="ChannelCustomerNo">ChannelCustomerNo.</param>
        /// <param name="BillingAddress">BillingAddress (required).</param>
        /// <param name="ShippingAddress">ShippingAddress (required).</param>
        /// <param name="ExtraData">ExtraData.</param>
        public ChannelOrderRequest(string ChannelOrderNo = default(string), List<ChannelOrderLineRequest> Lines = default(List<ChannelOrderLineRequest>), string Phone = default(string), string Email = default(string), string CompanyRegistrationNo = default(string), string VatNo = default(string), string PaymentMethod = default(string), double? ShippingCostsInclVat = default(double?), string CurrencyCode = default(string), DateTime? OrderDate = default(DateTime?), string ChannelCustomerNo = default(string), EntitiesAddressModels BillingAddress = default(EntitiesAddressModels), EntitiesAddressModels ShippingAddress = default(EntitiesAddressModels), Dictionary<string, string> ExtraData = default(Dictionary<string, string>))
        {
            // to ensure "ChannelOrderNo" is required (not null)
            if (ChannelOrderNo == null)
            {
                throw new InvalidDataException("ChannelOrderNo is a required property for ChannelOrderRequest and cannot be null");
            }
            else
            {
                this.ChannelOrderNo = ChannelOrderNo;
            }
            // to ensure "Lines" is required (not null)
            if (Lines == null)
            {
                throw new InvalidDataException("Lines is a required property for ChannelOrderRequest and cannot be null");
            }
            else
            {
                this.Lines = Lines;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for ChannelOrderRequest and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "PaymentMethod" is required (not null)
            if (PaymentMethod == null)
            {
                throw new InvalidDataException("PaymentMethod is a required property for ChannelOrderRequest and cannot be null");
            }
            else
            {
                this.PaymentMethod = PaymentMethod;
            }
            // to ensure "ShippingCostsInclVat" is required (not null)
            if (ShippingCostsInclVat == null)
            {
                throw new InvalidDataException("ShippingCostsInclVat is a required property for ChannelOrderRequest and cannot be null");
            }
            else
            {
                this.ShippingCostsInclVat = ShippingCostsInclVat;
            }
            // to ensure "CurrencyCode" is required (not null)
            if (CurrencyCode == null)
            {
                throw new InvalidDataException("CurrencyCode is a required property for ChannelOrderRequest and cannot be null");
            }
            else
            {
                this.CurrencyCode = CurrencyCode;
            }
            // to ensure "OrderDate" is required (not null)
            if (OrderDate == null)
            {
                throw new InvalidDataException("OrderDate is a required property for ChannelOrderRequest and cannot be null");
            }
            else
            {
                this.OrderDate = OrderDate;
            }
            // to ensure "BillingAddress" is required (not null)
            if (BillingAddress == null)
            {
                throw new InvalidDataException("BillingAddress is a required property for ChannelOrderRequest and cannot be null");
            }
            else
            {
                this.BillingAddress = BillingAddress;
            }
            // to ensure "ShippingAddress" is required (not null)
            if (ShippingAddress == null)
            {
                throw new InvalidDataException("ShippingAddress is a required property for ChannelOrderRequest and cannot be null");
            }
            else
            {
                this.ShippingAddress = ShippingAddress;
            }
            this.Phone = Phone;
            this.CompanyRegistrationNo = CompanyRegistrationNo;
            this.VatNo = VatNo;
            this.ChannelCustomerNo = ChannelCustomerNo;
            this.ExtraData = ExtraData;
        }
        
        /// <summary>
        /// The unique order reference used by the Channel
        /// </summary>
        /// <value>The unique order reference used by the Channel</value>
        [DataMember(Name="ChannelOrderNo", EmitDefaultValue=false)]
        public string ChannelOrderNo { get; set; }

        /// <summary>
        /// The order lines
        /// </summary>
        /// <value>The order lines</value>
        [DataMember(Name="Lines", EmitDefaultValue=false)]
        public List<ChannelOrderLineRequest> Lines { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="Phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets CompanyRegistrationNo
        /// </summary>
        [DataMember(Name="CompanyRegistrationNo", EmitDefaultValue=false)]
        public string CompanyRegistrationNo { get; set; }

        /// <summary>
        /// Gets or Sets VatNo
        /// </summary>
        [DataMember(Name="VatNo", EmitDefaultValue=false)]
        public string VatNo { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// The shipping fee including VAT  (in the tenant&#39;s base currency calculated using the exchange rate at the time of ordering).
        /// </summary>
        /// <value>The shipping fee including VAT  (in the tenant&#39;s base currency calculated using the exchange rate at the time of ordering).</value>
        [DataMember(Name="ShippingCostsInclVat", EmitDefaultValue=false)]
        public double? ShippingCostsInclVat { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="CurrencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name="OrderDate", EmitDefaultValue=false)]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets ChannelCustomerNo
        /// </summary>
        [DataMember(Name="ChannelCustomerNo", EmitDefaultValue=false)]
        public string ChannelCustomerNo { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="BillingAddress", EmitDefaultValue=false)]
        public EntitiesAddressModels BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="ShippingAddress", EmitDefaultValue=false)]
        public EntitiesAddressModels ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [DataMember(Name="ExtraData", EmitDefaultValue=false)]
        public Dictionary<string, string> ExtraData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChannelOrderRequest {\n");
            sb.Append("  ChannelOrderNo: ").Append(ChannelOrderNo).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CompanyRegistrationNo: ").Append(CompanyRegistrationNo).Append("\n");
            sb.Append("  VatNo: ").Append(VatNo).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  ShippingCostsInclVat: ").Append(ShippingCostsInclVat).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  ChannelCustomerNo: ").Append(ChannelCustomerNo).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChannelOrderRequest);
        }

        /// <summary>
        /// Returns true if ChannelOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ChannelOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChannelOrderRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelOrderNo == input.ChannelOrderNo ||
                    (this.ChannelOrderNo != null &&
                    this.ChannelOrderNo.Equals(input.ChannelOrderNo))
                ) && 
                (
                    this.Lines == input.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(input.Lines)
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CompanyRegistrationNo == input.CompanyRegistrationNo ||
                    (this.CompanyRegistrationNo != null &&
                    this.CompanyRegistrationNo.Equals(input.CompanyRegistrationNo))
                ) && 
                (
                    this.VatNo == input.VatNo ||
                    (this.VatNo != null &&
                    this.VatNo.Equals(input.VatNo))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.ShippingCostsInclVat == input.ShippingCostsInclVat ||
                    (this.ShippingCostsInclVat != null &&
                    this.ShippingCostsInclVat.Equals(input.ShippingCostsInclVat))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && 
                (
                    this.ChannelCustomerNo == input.ChannelCustomerNo ||
                    (this.ChannelCustomerNo != null &&
                    this.ChannelCustomerNo.Equals(input.ChannelCustomerNo))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    this.ExtraData != null &&
                    this.ExtraData.SequenceEqual(input.ExtraData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelOrderNo != null)
                    hashCode = hashCode * 59 + this.ChannelOrderNo.GetHashCode();
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.CompanyRegistrationNo != null)
                    hashCode = hashCode * 59 + this.CompanyRegistrationNo.GetHashCode();
                if (this.VatNo != null)
                    hashCode = hashCode * 59 + this.VatNo.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.ShippingCostsInclVat != null)
                    hashCode = hashCode * 59 + this.ShippingCostsInclVat.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.ChannelCustomerNo != null)
                    hashCode = hashCode * 59 + this.ChannelCustomerNo.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.ExtraData != null)
                    hashCode = hashCode * 59 + this.ExtraData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ChannelOrderNo (string) maxLength
            if(this.ChannelOrderNo != null && this.ChannelOrderNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelOrderNo, length must be less than 50.", new [] { "ChannelOrderNo" });
            }

            // ChannelOrderNo (string) minLength
            if(this.ChannelOrderNo != null && this.ChannelOrderNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelOrderNo, length must be greater than 0.", new [] { "ChannelOrderNo" });
            }

            // Phone (string) maxLength
            if(this.Phone != null && this.Phone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 20.", new [] { "Phone" });
            }

            // Phone (string) minLength
            if(this.Phone != null && this.Phone.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be greater than 0.", new [] { "Phone" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 250.", new [] { "Email" });
            }

            // Email (string) minLength
            if(this.Email != null && this.Email.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 0.", new [] { "Email" });
            }

            // CompanyRegistrationNo (string) maxLength
            if(this.CompanyRegistrationNo != null && this.CompanyRegistrationNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyRegistrationNo, length must be less than 50.", new [] { "CompanyRegistrationNo" });
            }

            // CompanyRegistrationNo (string) minLength
            if(this.CompanyRegistrationNo != null && this.CompanyRegistrationNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyRegistrationNo, length must be greater than 0.", new [] { "CompanyRegistrationNo" });
            }

            // VatNo (string) maxLength
            if(this.VatNo != null && this.VatNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNo, length must be less than 50.", new [] { "VatNo" });
            }

            // VatNo (string) minLength
            if(this.VatNo != null && this.VatNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VatNo, length must be greater than 0.", new [] { "VatNo" });
            }

            // PaymentMethod (string) maxLength
            if(this.PaymentMethod != null && this.PaymentMethod.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethod, length must be less than 50.", new [] { "PaymentMethod" });
            }

            // PaymentMethod (string) minLength
            if(this.PaymentMethod != null && this.PaymentMethod.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentMethod, length must be greater than 0.", new [] { "PaymentMethod" });
            }

            // ChannelCustomerNo (string) maxLength
            if(this.ChannelCustomerNo != null && this.ChannelCustomerNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelCustomerNo, length must be less than 50.", new [] { "ChannelCustomerNo" });
            }

            // ChannelCustomerNo (string) minLength
            if(this.ChannelCustomerNo != null && this.ChannelCustomerNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChannelCustomerNo, length must be greater than 0.", new [] { "ChannelCustomerNo" });
            }

            yield break;
        }
    }

}
