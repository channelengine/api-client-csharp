/* 
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChannelEngine.Api.Client.Client.SwaggerDateConverter;

namespace ChannelEngine.Api.Client.Model
{
    /// <summary>
    /// MerchantCancellationRequest
    /// </summary>
    [DataContract]
    public partial class MerchantCancellationRequest :  IEquatable<MerchantCancellationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantCancellationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantCancellationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantCancellationRequest" /> class.
        /// </summary>
        /// <param name="MerchantCancellationNo">MerchantCancellationNo (required).</param>
        /// <param name="MerchantOrderNo">MerchantOrderNo (required).</param>
        /// <param name="Lines">Lines (required).</param>
        /// <param name="Reason">Reason.</param>
        public MerchantCancellationRequest(string MerchantCancellationNo = default(string), string MerchantOrderNo = default(string), List<MerchantCancellationLineRequest> Lines = default(List<MerchantCancellationLineRequest>), string Reason = default(string))
        {
            // to ensure "MerchantCancellationNo" is required (not null)
            if (MerchantCancellationNo == null)
            {
                throw new InvalidDataException("MerchantCancellationNo is a required property for MerchantCancellationRequest and cannot be null");
            }
            else
            {
                this.MerchantCancellationNo = MerchantCancellationNo;
            }
            // to ensure "MerchantOrderNo" is required (not null)
            if (MerchantOrderNo == null)
            {
                throw new InvalidDataException("MerchantOrderNo is a required property for MerchantCancellationRequest and cannot be null");
            }
            else
            {
                this.MerchantOrderNo = MerchantOrderNo;
            }
            // to ensure "Lines" is required (not null)
            if (Lines == null)
            {
                throw new InvalidDataException("Lines is a required property for MerchantCancellationRequest and cannot be null");
            }
            else
            {
                this.Lines = Lines;
            }
            this.Reason = Reason;
        }
        
        /// <summary>
        /// Gets or Sets MerchantCancellationNo
        /// </summary>
        [DataMember(Name="MerchantCancellationNo", EmitDefaultValue=false)]
        public string MerchantCancellationNo { get; set; }

        /// <summary>
        /// Gets or Sets MerchantOrderNo
        /// </summary>
        [DataMember(Name="MerchantOrderNo", EmitDefaultValue=false)]
        public string MerchantOrderNo { get; set; }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name="Lines", EmitDefaultValue=false)]
        public List<MerchantCancellationLineRequest> Lines { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantCancellationRequest {\n");
            sb.Append("  MerchantCancellationNo: ").Append(MerchantCancellationNo).Append("\n");
            sb.Append("  MerchantOrderNo: ").Append(MerchantOrderNo).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantCancellationRequest);
        }

        /// <summary>
        /// Returns true if MerchantCancellationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantCancellationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantCancellationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantCancellationNo == input.MerchantCancellationNo ||
                    (this.MerchantCancellationNo != null &&
                    this.MerchantCancellationNo.Equals(input.MerchantCancellationNo))
                ) && 
                (
                    this.MerchantOrderNo == input.MerchantOrderNo ||
                    (this.MerchantOrderNo != null &&
                    this.MerchantOrderNo.Equals(input.MerchantOrderNo))
                ) && 
                (
                    this.Lines == input.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(input.Lines)
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantCancellationNo != null)
                    hashCode = hashCode * 59 + this.MerchantCancellationNo.GetHashCode();
                if (this.MerchantOrderNo != null)
                    hashCode = hashCode * 59 + this.MerchantOrderNo.GetHashCode();
                if (this.Lines != null)
                    hashCode = hashCode * 59 + this.Lines.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
