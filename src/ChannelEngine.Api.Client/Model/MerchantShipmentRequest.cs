/* 
 * ChannelEngine API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ChannelEngine.Api.Client.Client.SwaggerDateConverter;

namespace ChannelEngine.Api.Client.Model
{
    /// <summary>
    /// MerchantShipmentRequest
    /// </summary>
    [DataContract]
    public partial class MerchantShipmentRequest :  IEquatable<MerchantShipmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantShipmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantShipmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantShipmentRequest" /> class.
        /// </summary>
        /// <param name="MerchantShipmentNo">MerchantShipmentNo (required).</param>
        /// <param name="MerchantOrderNo">MerchantOrderNo (required).</param>
        /// <param name="Lines">Lines (required).</param>
        /// <param name="TrackTraceNo">TrackTraceNo.</param>
        /// <param name="TrackTraceUrl">TrackTraceUrl.</param>
        /// <param name="Method">Method.</param>
        public MerchantShipmentRequest(string MerchantShipmentNo = default(string), string MerchantOrderNo = default(string), List<MerchantShipmentLineRequest> Lines = default(List<MerchantShipmentLineRequest>), string TrackTraceNo = default(string), string TrackTraceUrl = default(string), string Method = default(string))
        {
            // to ensure "MerchantShipmentNo" is required (not null)
            if (MerchantShipmentNo == null)
            {
                throw new InvalidDataException("MerchantShipmentNo is a required property for MerchantShipmentRequest and cannot be null");
            }
            else
            {
                this.MerchantShipmentNo = MerchantShipmentNo;
            }
            // to ensure "MerchantOrderNo" is required (not null)
            if (MerchantOrderNo == null)
            {
                throw new InvalidDataException("MerchantOrderNo is a required property for MerchantShipmentRequest and cannot be null");
            }
            else
            {
                this.MerchantOrderNo = MerchantOrderNo;
            }
            // to ensure "Lines" is required (not null)
            if (Lines == null)
            {
                throw new InvalidDataException("Lines is a required property for MerchantShipmentRequest and cannot be null");
            }
            else
            {
                this.Lines = Lines;
            }
            this.TrackTraceNo = TrackTraceNo;
            this.TrackTraceUrl = TrackTraceUrl;
            this.Method = Method;
        }
        
        /// <summary>
        /// Gets or Sets MerchantShipmentNo
        /// </summary>
        [DataMember(Name="MerchantShipmentNo", EmitDefaultValue=false)]
        public string MerchantShipmentNo { get; set; }

        /// <summary>
        /// Gets or Sets MerchantOrderNo
        /// </summary>
        [DataMember(Name="MerchantOrderNo", EmitDefaultValue=false)]
        public string MerchantOrderNo { get; set; }

        /// <summary>
        /// Gets or Sets Lines
        /// </summary>
        [DataMember(Name="Lines", EmitDefaultValue=false)]
        public List<MerchantShipmentLineRequest> Lines { get; set; }

        /// <summary>
        /// Gets or Sets TrackTraceNo
        /// </summary>
        [DataMember(Name="TrackTraceNo", EmitDefaultValue=false)]
        public string TrackTraceNo { get; set; }

        /// <summary>
        /// Gets or Sets TrackTraceUrl
        /// </summary>
        [DataMember(Name="TrackTraceUrl", EmitDefaultValue=false)]
        public string TrackTraceUrl { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="Method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantShipmentRequest {\n");
            sb.Append("  MerchantShipmentNo: ").Append(MerchantShipmentNo).Append("\n");
            sb.Append("  MerchantOrderNo: ").Append(MerchantOrderNo).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  TrackTraceNo: ").Append(TrackTraceNo).Append("\n");
            sb.Append("  TrackTraceUrl: ").Append(TrackTraceUrl).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MerchantShipmentRequest);
        }

        /// <summary>
        /// Returns true if MerchantShipmentRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of MerchantShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantShipmentRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MerchantShipmentNo == other.MerchantShipmentNo ||
                    this.MerchantShipmentNo != null &&
                    this.MerchantShipmentNo.Equals(other.MerchantShipmentNo)
                ) && 
                (
                    this.MerchantOrderNo == other.MerchantOrderNo ||
                    this.MerchantOrderNo != null &&
                    this.MerchantOrderNo.Equals(other.MerchantOrderNo)
                ) && 
                (
                    this.Lines == other.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(other.Lines)
                ) && 
                (
                    this.TrackTraceNo == other.TrackTraceNo ||
                    this.TrackTraceNo != null &&
                    this.TrackTraceNo.Equals(other.TrackTraceNo)
                ) && 
                (
                    this.TrackTraceUrl == other.TrackTraceUrl ||
                    this.TrackTraceUrl != null &&
                    this.TrackTraceUrl.Equals(other.TrackTraceUrl)
                ) && 
                (
                    this.Method == other.Method ||
                    this.Method != null &&
                    this.Method.Equals(other.Method)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MerchantShipmentNo != null)
                    hash = hash * 59 + this.MerchantShipmentNo.GetHashCode();
                if (this.MerchantOrderNo != null)
                    hash = hash * 59 + this.MerchantOrderNo.GetHashCode();
                if (this.Lines != null)
                    hash = hash * 59 + this.Lines.GetHashCode();
                if (this.TrackTraceNo != null)
                    hash = hash * 59 + this.TrackTraceNo.GetHashCode();
                if (this.TrackTraceUrl != null)
                    hash = hash * 59 + this.TrackTraceUrl.GetHashCode();
                if (this.Method != null)
                    hash = hash * 59 + this.Method.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TrackTraceNo (string) maxLength
            if(this.TrackTraceNo != null && this.TrackTraceNo.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackTraceNo, length must be less than 50.", new [] { "TrackTraceNo" });
            }

            // TrackTraceNo (string) minLength
            if(this.TrackTraceNo != null && this.TrackTraceNo.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackTraceNo, length must be greater than 0.", new [] { "TrackTraceNo" });
            }

            // TrackTraceUrl (string) maxLength
            if(this.TrackTraceUrl != null && this.TrackTraceUrl.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackTraceUrl, length must be less than 250.", new [] { "TrackTraceUrl" });
            }

            // TrackTraceUrl (string) minLength
            if(this.TrackTraceUrl != null && this.TrackTraceUrl.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrackTraceUrl, length must be greater than 0.", new [] { "TrackTraceUrl" });
            }

            // Method (string) maxLength
            if(this.Method != null && this.Method.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Method, length must be less than 50.", new [] { "Method" });
            }

            // Method (string) minLength
            if(this.Method != null && this.Method.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Method, length must be greater than 0.", new [] { "Method" });
            }

            yield break;
        }
    }

}
